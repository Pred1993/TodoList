{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolist-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForms/AddItemForms.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/TodoList/Task/Task.tsx","features/TodolistsList/TodoList/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","trash/AppWithReducers.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","StatusCode","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","put","tasksAPI","taskId","dataUpdateRequest","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialized","todolistsReducer","state","action","todolist","map","td","filter","entityStatus","id","newTodolist","newTodolistTitle","removeTodolistAC","addTodolistAC","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","tasksReducer","tasks","t","copyState","forEach","st","newTask","task","endState","removeTasksAC","addTasksAC","updateTaskAC","changeTaskEntityStatusAC","updateTaskTC","todoListId","getState","find","model","description","priority","startDate","deadline","then","response","resultCode","catch","finally","AddItemForms","React","memo","props","console","log","useState","setTitle","setError","onClickHandlerAddTask","trim","callBack","TextField","disabled","value","onChange","e","currentTarget","onKeyPress","key","label","variant","helperText","size","Button","style","maxHeight","onClick","endIcon","Send","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onclickHandler","useCallback","removeTasks","onChangeCheckedHandler","newStatusValue","checked","changeChecked","Completed","New","onChangeTitleHandler","changeTaskTitle","className","Checkbox","color","inputProps","IconButton","aria-label","Delete","TodoList","demo","useDispatch","useEffect","todoList","setTasksAC","items","changeTasks","reactTodolist","onClickHandlerAll","changeFilter","onClickHandlerCompleted","onClickHandlerActive","addTask","onChangeTitleTodolistHandler","changeTitleTodoList","removeTodoList","TodolistsList","todoLists","useSelector","auth","deleteTodolistTС","deleteTaskTC","item","addTaskTC","changeTodolistTitleTС","addTodoList","addTodolistTС","Grid","container","padding","spacing","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","Ok","justifyContent","FormControl","handleSubmit","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","res","AppBar","position","Toolbar","edge","mr","Typography","component","flexGrow","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","rootReducer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","combineReducers","store","legacy_createStore","applyMiddleware","thunk","AppWithReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.737addb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App1 is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosResponse } from 'axios';\nimport { RequestStatusType } from '../app/app-reducer';\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': '109cdbd6-571a-45e5-80a2-833676b0684d',\n  },\n};\n\nconst instance = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  ...settings,\n});\n\nexport const todolistAPI = {\n  getTodolist() {\n    return instance.get<TodoListType[]>('todo-lists');\n  },\n  CreateTodolist(title: string) {\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodoListType }>>>('todo-lists', {\n      title: title,\n    });\n  },\n  DeleteTodolist(todolistId: string) {\n    return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`);\n  },\n  UpdateTodolistTitle(todolistId: string, title: string) {\n    return instance.put<{ title: string }, AxiosResponse<ResponseType<{}>>>(`todo-lists/${todolistId}`, {\n      title: title,\n    });\n  },\n};\n\nexport const tasksAPI = {\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`);\n  },\n  CreateTasks(todolistId: string, title: string) {\n    return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(\n      `todo-lists/${todolistId}/tasks`,\n      { title: title },\n    );\n  },\n  DeleteTasks(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  UpdateTasks(todolistId: string, taskId: string, dataUpdateRequest: dataUpdateRequestType) {\n    return instance.put<dataUpdateRequestType, AxiosResponse<ResponseType<{}>>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      dataUpdateRequest,\n    );\n  },\n};\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(`auth/login`, data);\n  },\n  me() {\n    return instance.get<ResponseType<{ id: number; email: string; login: string }>>(`auth/me`);\n  },\n  logout() {\n    return instance.delete<ResponseType<{}>>(`/auth/login`)\n  }\n};\n\n//types\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n\nexport type TodoListType = {\n  addedDate: string;\n  id: string;\n  order: number;\n  title: string;\n};\n\nexport type ResponseType<T> = {\n  fieldsErrors: string[];\n  messages: string[];\n  resultCode: number;\n  data: T;\n};\n\nexport enum StatusCode {\n  Ok,\n  Error,\n  Captcha,\n}\n\nexport enum TaskStatuses {\n  New,\n  InProgress,\n  Completed,\n  Draft,\n}\n\nexport enum TaskPriorities {\n  Low,\n  Middle,\n  Hi,\n  Urgently,\n  Later,\n}\n\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType };\nexport type TaskType = {\n  addedDate: string;\n  deadline: null | string;\n  description: null | string;\n  id: string;\n  order: number;\n  priority: TaskPriorities;\n  startDate: null | string;\n  status: TaskStatuses;\n  title: string;\n  todoListId: string;\n};\n\nexport type GetTasksResponseType = {\n  error: string | null;\n  items: TaskType[];\n  totalCount: number;\n};\n\nexport type dataUpdateRequestType = {\n  title: string;\n  description: null | string;\n  status: number;\n  priority: number;\n  startDate: null | string;\n  deadline: null | string;\n};\n","import { setAppErrorAC, setAppStatusAC } from '../app/app-reducer';\nimport { ResponseType } from '../api/todolist-api';\nimport { Dispatch } from 'redux';\ntype ActionErrorType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>;\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<ActionErrorType>) => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[0]));\n  } else {\n    dispatch(setAppErrorAC('Some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<ActionErrorType>) => {\n  dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'));\n  dispatch(setAppStatusAC('failed'));\n};\n","import { Dispatch } from 'redux';\nimport { authAPI, LoginParamsType, StatusCode } from '../../api/todolist-api';\nimport { setAppStatusAC } from '../../app/app-reducer';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\n\nconst initialState = {\n  isLoggedIn: false, // значение для Navigate(залогинены мы или нет)\n};\nexport type initialStateType = typeof initialState;\nexport const authReducer = (state: initialStateType = initialState, action: AuthActionType) => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return { ...state, isLoggedIn: action.isLoggedIn };\n    default:\n      return state;\n  }\n};\n\n// action\nexport const setIsLoggedInAC = (isLoggedIn: boolean) =>\n  ({\n    type: 'login/SET-IS-LOGGED-IN',\n    isLoggedIn,\n  } as const);\n\n// thunk\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<AuthActionType>) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .login(data)\n    .then((response) => {\n      if (response.data.resultCode === StatusCode.Ok) {\n        dispatch(setIsLoggedInAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(response.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const logoutTC = () => (dispatch: Dispatch<AuthActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// type\nexport type AuthActionType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setAppStatusAC>;\n","//app-reducer.tsx\n\nimport { Dispatch } from 'redux';\nimport { authAPI } from '../api/todolist-api';\nimport { setIsLoggedInAC } from '../features/Login/auth-reducer';\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nconst initialState = {\n  // происходит ли сейчас взаимодействие с сервером\n  status: 'idle' as RequestStatusType,\n  // если ошибка какая-то глобальная произойдёт мы запишем текст ошибки сюда\n  error: null as string | null,\n  // проинициализировано наше приложение или нет\n  isInitialized: false,\n};\n\nexport type InitialStateType = typeof initialState;\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET-STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET-ERROR':\n      return { ...state, error: action.error };\n    case 'APP/SET-INITIALIZED':\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return state;\n  }\n};\n//types\nexport type AppActionsType =\n  | ReturnType<typeof setAppErrorAC>\n  | ReturnType<typeof setAppStatusAC>\n  | ReturnType<typeof setAppIsInitializedAC>\n  | ReturnType<typeof setIsLoggedInAC>;\n// action\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const);\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\nexport const setAppIsInitializedAC = (isInitialized: boolean) =>\n  ({ type: 'APP/SET-INITIALIZED', isInitialized } as const);\n// thunk\nexport const isInitializedAppTC = () => (dispatch: Dispatch<AppActionsType>) => {\n  debugger\n  authAPI.me().then((response) => {\n    if (response.data.resultCode === 0) {\n      dispatch(setIsLoggedInAC(true));\n    }\n  }).finally(() => {\n    dispatch(setAppIsInitializedAC(true));\n  });\n};\n","import { todolistAPI, TodoListType } from '../../api/todolist-api';\nimport { Dispatch } from 'redux';\nimport { RequestStatusType, setAppStatusAC } from '../../app/app-reducer';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\n\nconst initialState: Array<TodoListDomainType> = [\n  /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'},\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle'}*/\n];\n\n// reducer\nexport const todolistsReducer = (\n  state: Array<TodoListDomainType> = initialState,\n  action: ActionTodolistType,\n): Array<TodoListDomainType> => {\n  switch (action.type) {\n    case 'SET-TODOLIST':\n      return action.todolist.map((td) => ({ ...td, filter: 'all', entityStatus: 'idle' }));\n    case 'REMOVE-TODOLIST':\n      return state.filter((td) => td.id !== action.todolistId);\n    case 'ADD-TODOLIST':\n      const newTodolist: TodoListDomainType = { ...action.todolist, filter: 'all', entityStatus: 'idle' };\n      return [newTodolist, ...state];\n    case 'CHANGE-TODOLIST-TITLE':\n      return state.map((td) => (td.id === action.todolistId ? { ...td, title: action.newTodolistTitle } : td));\n    case 'CHANGE-TODOLIST-FILTER':\n      return state.map((td) => (td.id === action.todolistId ? { ...td, filter: action.filter } : td));\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\n      return state.map((td) => (td.id === action.todolistId ? { ...td, entityStatus: action.entityStatus } : td));\n    default:\n      return state;\n  }\n};\n\n//types\nexport type FilterType = 'all' | 'completed' | 'active';\nexport type TodoListDomainType = TodoListType & {\n  filter: FilterType;\n  entityStatus: RequestStatusType;\n};\nexport type ActionTodolistType =\n  | ReturnType<typeof removeTodolistAC>\n  | ReturnType<typeof addTodolistAC>\n  | ReturnType<typeof changeTodolistTitleAC>\n  | ReturnType<typeof changeTodolistFilterAC>\n  | ReturnType<typeof setTodolistAC>\n  | ReturnType<typeof setAppStatusAC>\n  | ReturnType<typeof changeTodolistEntityStatusAC>;\n\n// actions\nexport const removeTodolistAC = (todolistId: string) => ({ type: 'REMOVE-TODOLIST', todolistId } as const);\nexport const addTodolistAC = (todolist: TodoListType) => ({ type: 'ADD-TODOLIST', todolist } as const);\nexport const changeTodolistTitleAC = (todolistId: string, newTodolistTitle: string) =>\n  ({ type: 'CHANGE-TODOLIST-TITLE', todolistId, newTodolistTitle } as const);\nexport const changeTodolistFilterAC = (todolistId: string, filter: FilterType) =>\n  ({ type: 'CHANGE-TODOLIST-FILTER', todolistId, filter } as const);\nexport const setTodolistAC = (todolist: Array<TodoListType>) => ({ type: 'SET-TODOLIST', todolist } as const);\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) =>\n  ({ type: 'CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, todolistId } as const);\n\n// thunks\nexport const fetchTodolistTС = () => (dispatch: Dispatch<ActionTodolistType>) => {\n  dispatch(setAppStatusAC('loading')); // для отрисовки загрузки во время связи с сервером (бегущая строка)\n  todolistAPI\n    .getTodolist()\n    .then((response) => {\n      dispatch(setTodolistAC(response.data));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const deleteTodolistTС = (todoListId: string) => (dispatch: Dispatch<ActionTodolistType>) => {\n  dispatch(setAppStatusAC('loading'));\n  dispatch(changeTodolistEntityStatusAC(todoListId, 'loading')); // для задизейбливония кнопки пока идёт ответ с сервера\n  todolistAPI\n    .DeleteTodolist(todoListId)\n    .then((response) => {\n      if (response.data.resultCode === 0) {\n        const action = removeTodolistAC(todoListId);\n        dispatch(action);\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(response.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const addTodolistTС = (title: string) => (dispatch: Dispatch<ActionTodolistType>) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistAPI\n    .CreateTodolist(title)\n    .then((response) => {\n      if (response.data.resultCode === 0) {\n        const action = addTodolistAC(response.data.data.item);\n        dispatch(action);\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(response.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const changeTodolistTitleTС =\n  (todoListId: string, title: string) => (dispatch: Dispatch<ActionTodolistType>) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'));\n    todolistAPI\n      .UpdateTodolistTitle(todoListId, title)\n      .then((response) => {\n        if (response.data.resultCode === 0) {\n          const action = changeTodolistTitleAC(todoListId, title);\n          dispatch(action);\n          dispatch(setAppStatusAC('succeeded'));\n        } else {\n          handleServerAppError(response.data, dispatch);\n        }\n      })\n      .catch((error) => {\n        handleServerNetworkError(error, dispatch);\n      })\n      .finally(() => {\n        dispatch(changeTodolistEntityStatusAC(todoListId, 'idle'));\n      });\n  };\n","import { addTodolistAC, removeTodolistAC, setTodolistAC } from './todolist-reducer';\nimport { dataUpdateRequestType, TaskDomainType, tasksAPI, TaskType } from '../../api/todolist-api';\nimport { Dispatch } from 'redux';\nimport { AppRootStateType } from '../../app/store';\nimport { TasksStateType } from './TodolistsList';\nimport { RequestStatusType, setAppErrorAC, setAppStatusAC } from '../../app/app-reducer';\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\n\nconst initialState: TasksStateType = {\n  /*\"todolistId1\": [\n            { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n            { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n            { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n        ],\n        \"todolistId2\": [\n            { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n            { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\n            { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\n        ]*/\n};\n\n// reducer\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTaskType): TasksStateType => {\n  switch (action.type) {\n    case 'SET-TASKS':\n      return { ...state, [action.todolistId]: action.tasks.map((t) => ({ ...t, entityStatus: 'idle' })) };\n    case 'SET-TODOLIST':\n      const copyState = { ...state };\n      action.todolist.forEach((td) => {\n        copyState[td.id] = [];\n      });\n      return copyState;\n    case 'REMOVE-TASKS':\n      return { ...state, [action.todolistId]: state[action.todolistId].filter((st) => st.id !== action.taskId) };\n    case 'ADD-TASKS':\n      const newTask: TaskDomainType = { ...action.task, entityStatus: 'idle' };\n      return { ...state, [action.todolistId]: [newTask, ...state[action.todolistId]] };\n    case 'UPDATE-TASK':\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map((st) =>\n          st.id === action.taskId\n            ? {\n                ...st,\n                ...action.dataUpdateRequest,\n              }\n            : st,\n        ),\n      };\n    case 'ADD-TODOLIST':\n      return { ...state, [action.todolist.id]: [] };\n    case 'REMOVE-TODOLIST':\n      const endState = { ...state };\n      delete endState[action.todolistId];\n      return endState;\n    default:\n      return state;\n    case 'CHANGE-TASK-ENTITY-STATUS':\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map((t) =>\n          t.id === action.taskId ? { ...t, entityStatus: action.entityStatus } : t,\n        ),\n      };\n  }\n};\n// types\nexport type dataUpdateDomainRequestType = {\n  title?: string;\n  description?: null | string;\n  status?: number;\n  priority?: number;\n  startDate?: null | string;\n  deadline?: null | string;\n};\n\nexport type ActionTaskType =\n  | ReturnType<typeof removeTasksAC>\n  | ReturnType<typeof addTasksAC>\n  | ReturnType<typeof updateTaskAC>\n  | ReturnType<typeof addTodolistAC>\n  | ReturnType<typeof removeTodolistAC>\n  | ReturnType<typeof setTodolistAC>\n  | ReturnType<typeof setTasksAC>\n  | ReturnType<typeof setAppErrorAC>\n  | ReturnType<typeof setAppStatusAC>\n  | ReturnType<typeof changeTaskEntityStatusAC>;\n\n// actions\nexport const removeTasksAC = (todolistId: string, taskId: string) =>\n  ({\n    type: 'REMOVE-TASKS',\n    todolistId,\n    taskId,\n  } as const);\n\nexport const addTasksAC = (todolistId: string, task: TaskType) => ({ type: 'ADD-TASKS', todolistId, task } as const);\n\nexport const updateTaskAC = (todolistId: string, taskId: string, dataUpdateRequest: dataUpdateDomainRequestType) =>\n  ({\n    type: 'UPDATE-TASK',\n    todolistId,\n    taskId,\n    dataUpdateRequest,\n  } as const);\n\nexport const setTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\n  ({\n    type: 'SET-TASKS',\n    todolistId,\n    tasks,\n  } as const);\n\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) =>\n  ({\n    type: 'CHANGE-TASK-ENTITY-STATUS',\n    todolistId,\n    taskId,\n    entityStatus,\n  } as const);\n\n// thunks\nexport const fetchTasksTС = (todolistId: string) => (dispatch: Dispatch<ActionTaskType>) => {\n  dispatch(setAppStatusAC('loading'));\n  tasksAPI\n    .getTasks(todolistId)\n    .then((response) => {\n      dispatch(setTasksAC(todolistId, response.data.items));\n      dispatch(setAppStatusAC('succeeded'));\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const deleteTaskTC = (todoListId: string, taskId: string) => (dispatch: Dispatch<ActionTaskType>) => {\n  dispatch(setAppStatusAC('loading')); // для отрисовки загрузки во время связи с сервером (бегущая строка)\n  dispatch(changeTaskEntityStatusAC(todoListId, taskId, 'loading'));\n  // Удаление таски\n  tasksAPI\n    .DeleteTasks(todoListId, taskId)\n    .then((response) => {\n      if (response.data.resultCode === 0) {\n        const action = removeTasksAC(todoListId, taskId);\n        dispatch(action);\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(response.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const addTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch<ActionTaskType>) => {\n  dispatch(setAppStatusAC('loading'));\n  tasksAPI\n    .CreateTasks(todoListId, title)\n    .then((response) => {\n      if (response.data.resultCode === 0) {\n        const action = addTasksAC(todoListId, response.data.data.item);\n        dispatch(action);\n        dispatch(setAppStatusAC('succeeded'));\n      } else {\n        handleServerAppError(response.data, dispatch);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\nexport const updateTaskTC = (todoListId: string, taskId: string, dataUpdateRequest: dataUpdateDomainRequestType) => {\n  return (dispatch: Dispatch<ActionTaskType>, getState: () => AppRootStateType) => {\n    dispatch(setAppStatusAC('loading'));\n    dispatch(changeTaskEntityStatusAC(todoListId, taskId, 'loading'));\n    const state = getState();\n    const task = state.tasks[todoListId].find((t) => t.id === taskId); // дальше идет проверка в случае если таска не найдена\n    if (task) {\n      const model: dataUpdateRequestType = {\n        title: task.title,\n        status: task.status,\n        description: task.description,\n        priority: task.priority,\n        startDate: task.startDate,\n        deadline: task.deadline,\n        ...dataUpdateRequest,\n      };\n      tasksAPI\n        .UpdateTasks(todoListId, taskId, model)\n        .then((response) => {\n          if (response.data.resultCode === 0) {\n            const action = updateTaskAC(todoListId, taskId, dataUpdateRequest);\n            dispatch(action);\n            dispatch(setAppStatusAC('succeeded'));\n          } else {\n            handleServerAppError(response.data, dispatch); // обработка ошибок, которая приходит с сервера\n          }\n        })\n        .catch((error) => {\n          handleServerNetworkError(error, dispatch); // обработка ошибок из сети, допустим интернет рассоединился\n        })\n        .finally(() => {\n          dispatch(changeTaskEntityStatusAC(todoListId, taskId, 'idle'));\n        });\n    }\n  };\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport { Button, TextField } from '@mui/material';\nimport { Send } from '@mui/icons-material';\n\nexport type AddItemFormsPropsType = {\n  callBack: (title: string) => void;\n  disabled?: boolean;\n};\nconst AddItemForms = React.memo((props: AddItemFormsPropsType) => {\n  console.log('AddItemForms is called');\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState<string | null>(null);\n  const onChangeHandlerTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    // Функция-обработчик для изменения title из импута в стейте\n    setTitle(e.currentTarget.value);\n  };\n  const onKeyPressHandlerEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n    // Функция-обработчик для вызова callback-функции добавления новых тасок при помощи нажатия клавиши Enter\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.key === 'Enter') {\n      onClickHandlerAddTask();\n    }\n  };\n  //\n  const onClickHandlerAddTask = () => {\n    // Функция-обработчик для вызова callback-функции добавления новых тасок\n    if (title.trim() === '') {\n      setError('Title is required');\n      let clearSpace = '';\n      setTitle(clearSpace.trim());\n      return;\n    }\n    props.callBack(title.trim());\n    setTitle('');\n  };\n\n  return (\n    <div>\n      <TextField\n        disabled={props.disabled}\n        error={!!error}\n        value={title}\n        onChange={onChangeHandlerTitle}\n        onKeyPress={onKeyPressHandlerEnter}\n        id=\"outlined-basic\"\n        label=\"Type value\"\n        variant=\"outlined\"\n        helperText={error}\n        size={'small'}\n      />\n      <Button\n        style={{ maxHeight: '70px' }}\n        onClick={onClickHandlerAddTask}\n        variant=\"contained\"\n        endIcon={<Send />}\n        disabled={props.disabled}\n      >\n        Add\n      </Button>\n    </div>\n  );\n});\n\nexport default AddItemForms;\n","import React, { ChangeEvent, useState } from 'react';\nimport { TextField } from '@mui/material';\nexport type EditableSpanPropsType = {\n  title: string;\n  onChange: (title: string) => void;\n  disabled?: boolean;\n};\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  console.log('EditableSpan is added');\n  const [editMode, setEditMode] = useState<boolean>(false);\n  const [title, setTitle] = useState('');\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n  const onBlurHandler = () => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n  const onDoubleClickHandler = () => {\n    setEditMode(true);\n    setTitle(props.title);\n  };\n  return editMode ? (\n    <TextField\n      disabled={props.disabled}\n      onBlur={onBlurHandler}\n      onChange={onChangeHandler}\n      type=\"text\"\n      value={title}\n      autoFocus\n      id=\"outlined-basic\"\n      variant=\"standard\"\n    />\n  ) : (\n    <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\n  );\n});\n\nexport default EditableSpan;\n","import React, { ChangeEvent, useCallback } from 'react';\nimport { Checkbox, IconButton } from '@mui/material';\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan';\nimport { Delete } from '@mui/icons-material';\nimport { TaskDomainType, TaskStatuses } from '../../../../api/todolist-api';\nimport { RequestStatusType } from '../../../../app/app-reducer';\n\ntype TaskPropsType = {\n  task: TaskDomainType;\n  removeTasks: (todoListId: string, taskId: string) => void;\n  changeChecked: (todoListId: string, taskId: string, status: TaskStatuses) => void;\n  changeTaskTitle: (todoListId: string, taskId: string, title: string) => void;\n  todoListId: string;\n  entityStatus: RequestStatusType;\n};\nconst Task = React.memo((props: TaskPropsType) => {\n  const onclickHandler = useCallback(() => {\n    // Функция-обработчик для вызова callback-функции удаления тасок\n    props.removeTasks(props.todoListId, props.task.id);\n  }, [props.removeTasks, props.todoListId, props.task.id]);\n\n  const onChangeCheckedHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      // Функция-обработчик для вызова callback-функции изменения чекеда\n      let newStatusValue = e.currentTarget.checked;\n      props.changeChecked(props.todoListId, props.task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New);\n    },\n    [props.todoListId, props.task.id],\n  );\n\n  // Промежуточная функция для изменение значения title task за счёт превращения span в input\n  const onChangeTitleHandler = useCallback(\n    (title: string) => {\n      props.changeTaskTitle(props.todoListId, props.task.id, title);\n    },\n    [props.changeTaskTitle, props.todoListId, props.task.id],\n  );\n  return (\n    <li className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n      <Checkbox\n        disabled={props.entityStatus === 'loading' || props.task.entityStatus === 'loading'}\n        color={'success'}\n        checked={props.task.status === TaskStatuses.Completed}\n        onChange={onChangeCheckedHandler}\n        inputProps={{ 'aria-label': 'controlled' }}\n      />\n      <EditableSpan\n        title={props.task.title}\n        onChange={(title) => onChangeTitleHandler(title)}\n        disabled={props.entityStatus === 'loading' || props.task.entityStatus === 'loading'}\n      />\n      <IconButton\n        onClick={onclickHandler}\n        aria-label=\"delete\"\n        disabled={props.entityStatus === 'loading' || props.task.entityStatus === 'loading'}\n      >\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n\nexport default Task;\n","import React, { useCallback, useEffect } from 'react';\nimport '../../../app/App.css';\nimport AddItemForms from '../../../components/AddItemForms/AddItemForms';\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan';\nimport { Button, IconButton } from '@mui/material';\nimport { Delete } from '@mui/icons-material';\nimport Task from './Task/Task';\nimport { TaskDomainType, TaskStatuses } from '../../../api/todolist-api';\nimport { FilterType, TodoListDomainType } from '../todolist-reducer';\nimport { useDispatch } from 'react-redux';\nimport { AppThunkType } from '../../../app/store';\nimport { fetchTasksTС } from '../tasks-reducer';\n\ntype TodoListPropsType = {\n  todoList: TodoListDomainType;\n  tasks: Array<TaskDomainType>;\n  removeTasks: (todoListId: string, taskId: string) => void;\n  changeFilter: (todoListId: string, filter: FilterType) => void;\n  addTask: (todoListId: string, title: string) => void;\n  changeChecked: (todoListId: string, taskId: string, status: TaskStatuses) => void;\n  removeTodoList: (todoListId: string) => void;\n  changeTaskTitle: (todoListId: string, taskId: string, title: string) => void;\n  changeTitleTodoList: (todoListId: string, title: string) => void;\n  demo?: boolean;\n};\nexport const TodoList = React.memo(({ demo = false, ...props }: TodoListPropsType) => {\n  const dispatch = useDispatch<AppThunkType>();\n  useEffect(() => {\n    if (demo) {\n      return;\n    }\n    dispatch(fetchTasksTС(props.todoList.id));\n  }, []);\n\n  let changeTasks = props.tasks; // Фильтрация по новому значению фильтра\n  if (props.todoList.filter === 'completed') {\n    changeTasks = props.tasks.filter((t) => t.status === TaskStatuses.Completed);\n  }\n  if (props.todoList.filter === 'active') {\n    changeTasks = props.tasks.filter((t) => t.status === TaskStatuses.New);\n  }\n  // Отрисовка тасок методом Map\n  const reactTodolist = changeTasks.map((t) => {\n    return (\n      <Task\n        entityStatus={props.todoList.entityStatus}\n        key={t.id}\n        task={t}\n        removeTasks={props.removeTasks}\n        todoListId={props.todoList.id}\n        changeChecked={props.changeChecked}\n        changeTaskTitle={props.changeTaskTitle}\n      />\n    );\n  });\n  //\n  // Функция-обработчик для вызова callback-функций изменения фильтров\n  const onClickHandlerAll = useCallback(() => {\n    props.changeFilter(props.todoList.id, 'all');\n  }, [props.changeFilter, props.todoList.id]);\n  const onClickHandlerCompleted = useCallback(() => {\n    props.changeFilter(props.todoList.id, 'completed');\n  }, [props.changeFilter, props.todoList.id]);\n  const onClickHandlerActive = useCallback(() => {\n    props.changeFilter(props.todoList.id, 'active');\n  }, [props.changeFilter, props.todoList.id]);\n\n  const onclickHandlerRemoveTodoList = () => {\n    //Функция-обработчик для вызова callback-функции удаления todoList\n    props.removeTodoList(props.todoList.id);\n  };\n  // Промежуточная функция добавления тасок\n  const addTask = useCallback(\n    (title: string) => {\n      props.addTask(props.todoList.id, title);\n    },\n    [props.addTask, props.todoList.id],\n  );\n  // Промежуточная функция изменения title todoList за счёт превращения span в input\n  const onChangeTitleTodolistHandler = useCallback(\n    (title: string) => {\n      props.changeTitleTodoList(props.todoList.id, title);\n    },\n    [props.changeTitleTodoList, props.todoList.id],\n  );\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          title={props.todoList.title}\n          onChange={onChangeTitleTodolistHandler}\n          disabled={props.todoList.entityStatus === 'loading'}\n        />\n        <IconButton\n          onClick={onclickHandlerRemoveTodoList}\n          aria-label=\"delete\"\n          disabled={props.todoList.entityStatus === 'loading'}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n      <div>\n        <AddItemForms callBack={addTask} disabled={props.todoList.entityStatus === 'loading'} />\n      </div>\n      <ul>{reactTodolist}</ul>\n      <div>\n        <Button variant={props.todoList.filter === 'all' ? 'contained' : 'text'} onClick={onClickHandlerAll}>\n          All\n        </Button>\n        <Button\n          variant={props.todoList.filter === 'completed' ? 'contained' : 'text'}\n          color=\"success\"\n          onClick={onClickHandlerCompleted}\n        >\n          Completed\n        </Button>\n        <Button\n          variant={props.todoList.filter === 'active' ? 'contained' : 'text'}\n          color={'secondary'}\n          onClick={onClickHandlerActive}\n        >\n          Active\n        </Button>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType, AppThunkType } from '../../app/store';\nimport {\n  addTodolistTС,\n  changeTodolistFilterAC,\n  changeTodolistTitleTС,\n  deleteTodolistTС,\n  fetchTodolistTС,\n  FilterType,\n  TodoListDomainType,\n} from './todolist-reducer';\nimport { addTaskTC, deleteTaskTC, updateTaskTC } from './tasks-reducer';\nimport { TaskDomainType, TaskStatuses } from '../../api/todolist-api';\n\nimport { Grid, Paper } from '@mui/material';\nimport AddItemForms from '../../components/AddItemForms/AddItemForms';\nimport { TodoList } from './TodoList/TodoList';\nimport { Navigate } from 'react-router-dom';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskDomainType>;\n};\ntype PropsType = {\n  demo?: boolean;\n};\n\nconst TodolistsList = ({ demo = false }: PropsType) => {\n  const dispatch = useDispatch<AppThunkType>();\n  const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>((state) => state.todolist);\n  const tasks = useSelector<AppRootStateType, TasksStateType>((state) => state.tasks);\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n  useEffect(() => {\n    debugger\n    if (demo || !isLoggedIn) {\n      return;\n    }\n    dispatch(fetchTodolistTС());\n  }, []);\n\n  const removeTodoList = useCallback(\n    (todoListId: string) => {\n      // удаление TodoList\n      dispatch(deleteTodolistTС(todoListId));\n    },\n    [dispatch],\n  );\n\n  const removeTasks = useCallback(\n    // Удаление таски\n    (todoListId: string, taskId: string) => {\n      dispatch(deleteTaskTC(todoListId, taskId));\n    },\n    [dispatch],\n  );\n\n  const addTask = useCallback(\n    (todoListId: string, title: string) => {\n      // Добавление таски\n      dispatch(addTaskTC(todoListId, title));\n    },\n    [dispatch],\n  );\n  // Изменение значения title task за счёт превращения span в input\n  const changeTaskTitle = useCallback(\n    (todoListId: string, taskId: string, title: string) => {\n      dispatch(updateTaskTC(todoListId, taskId, { title: title }));\n    },\n    [dispatch],\n  );\n  // Изменение чекеда\n  const changeChecked = useCallback(\n    (todoListId: string, taskId: string, status: TaskStatuses) => {\n      dispatch(updateTaskTC(todoListId, taskId, { status: status }));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (todoListId: string, filter: FilterType) => {\n      // Изменение значения фильтра в todoLists\n      const action = changeTodolistFilterAC(todoListId, filter);\n      dispatch(action);\n    },\n    [dispatch],\n  );\n  //Функция изменения title todoList за счёт превращения span в input\n  const changeTitleTodoList = useCallback(\n    (todoListId: string, title: string) => {\n      dispatch(changeTodolistTitleTС(todoListId, title));\n    },\n    [dispatch],\n  );\n\n  // Создание нового тодолиста\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolistTС(title));\n    },\n    [dispatch],\n  );\n  if (!isLoggedIn) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ padding: '10px' }}>\n        <AddItemForms callBack={addTodoList} />\n      </Grid>\n      <Grid container spacing={3}>\n        {todoLists.map((td) => {\n          // Отрисовка компонент todoLists по map\n          return (\n            <Grid key={td.id} item>\n              <Paper key={td.id} style={{ padding: '10px' }}>\n                <TodoList\n                  todoList={td}\n                  key={td.id}\n                  tasks={tasks[td.id]}\n                  removeTasks={removeTasks}\n                  changeFilter={changeFilter}\n                  addTask={addTask}\n                  changeChecked={changeChecked}\n                  removeTodoList={removeTodoList}\n                  changeTaskTitle={changeTaskTitle}\n                  changeTitleTodoList={changeTitleTodoList}\n                  demo={demo}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n\nexport default TodolistsList;\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../app/store';\nimport { setAppErrorAC } from '../../app/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n  const error = useSelector<AppRootStateType, string | null>((state) => state.app.error);\n  const dispatch = useDispatch();\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n  return (\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n}\n","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from 'formik';\nimport { loginTC } from './auth-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType, AppThunkType } from '../../app/store';\nimport { Navigate } from 'react-router-dom';\n\ntype FormikErrorType = {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n};\nexport const Login = () => {\n  const dispatch = useDispatch<AppThunkType>();\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < 3) {\n        errors.password = 'Should be more symbols';\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      formik.resetForm();\n      dispatch(loginTC(values));\n    },\n  });\n  if (isLoggedIn) {\n    debugger\n    return <Navigate to={'/'} />;\n  }\n  return (\n    <Grid container justifyContent={'center'}>\n      <Grid item justifyContent={'center'}>\n        <FormControl>\n          <form onSubmit={formik.handleSubmit}>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a href={'https://social-network.samuraijs.com/'} target={'_blank'}>\n                  {' '}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\n              {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n              <TextField type=\"password\" label=\"Password\" margin=\"normal\" {...formik.getFieldProps('password')} />\n              {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n              <FormControlLabel\n                label={'Remember me'}\n                control={<Checkbox {...formik.getFieldProps('rememberMe')} />}\n                checked={formik.values.rememberMe}\n              />\n              <Button type={'submit'} variant={'contained'} color={'primary'}>\n                Login\n              </Button>\n            </FormGroup>\n          </form>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography,\n} from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport TodolistsList from '../features/TodolistsList/TodolistsList';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType, AppThunkType } from './store';\nimport { isInitializedAppTC, RequestStatusType } from './app-reducer';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Login } from '../features/Login/Login';\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n  demo?: boolean;\n};\nfunction App({ demo = false }: PropsType) {\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status);\n  const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized);\n  const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn);\n  const dispatch = useDispatch<AppThunkType>();\n  useEffect(() => {\n    dispatch(isInitializedAppTC());\n  }, []);\n  const logoutHandler = useCallback(() => {\n    dispatch(logoutTC())\n  }, [dispatch])\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', width: '100%', textAlign: 'center' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            News\n          </Typography>\n          { isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress color=\"success\" />}\n      </AppBar>\n      <Container fixed>\n        <Routes>\n          <Route path={'/'} element={<TodolistsList demo={demo} />} />\n          <Route path={'/login'} element={<Login />} />\n          <Route path={'/404'} element={<h1>404: PAGE NOT FOUND</h1>} />\n          <Route path={'*'} element={<Navigate to={'/404'} />} />\n        </Routes>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { applyMiddleware, combineReducers, compose, legacy_createStore } from 'redux';\nimport { ActionTodolistType, todolistsReducer } from '../features/TodolistsList/todolist-reducer';\nimport { ActionTaskType, tasksReducer } from '../features/TodolistsList/tasks-reducer';\nimport thunk, { ThunkDispatch } from 'redux-thunk';\nimport {AppActionsType, appReducer} from './app-reducer';\nimport {AuthActionType, authReducer} from '../features/Login/auth-reducer';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nconst rootReducer = combineReducers({\n  todolist: todolistsReducer,\n  tasks: tasksReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\nexport type ActionsType = ActionTodolistType | ActionTaskType | AppActionsType | AuthActionType;\nexport type AppThunkType = ThunkDispatch<AppRootStateType, void, ActionsType>;\n\nexport const store = legacy_createStore(rootReducer, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n","import React, { useReducer } from 'react';\nimport '../app/App.css';\nimport { TodoList } from '../features/TodolistsList/TodoList/TodoList';\nimport { v1 } from 'uuid';\nimport AddItemForms from '../components/AddItemForms/AddItemForms';\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@mui/material';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {\n  addTodolistAC,\n  changeTodolistFilterAC,\n  changeTodolistTitleAC,\n  FilterType,\n  removeTodolistAC,\n  todolistsReducer,\n} from '../features/TodolistsList/todolist-reducer';\nimport { addTasksAC, removeTasksAC, tasksReducer, updateTaskAC } from '../features/TodolistsList/tasks-reducer';\nimport { TaskDomainType, TaskPriorities, TaskStatuses, TaskType } from '../api/todolist-api';\n\nexport type TasksStateType = {\n  [key: string]: Array<TaskDomainType>;\n};\n\nfunction AppWithReducers() {\n  const todoListId1 = v1();\n  const todoListId2 = v1();\n  const [todoLists, dispatchToTodoListsReducer] = useReducer(todolistsReducer, [\n    { id: todoListId1, title: 'What to eat', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle' },\n    { id: todoListId2, title: 'What to learn', filter: 'all', addedDate: '', order: 0, entityStatus: 'idle' },\n  ]);\n\n  const [tasks, dispatchToTasksReducer] = useReducer(tasksReducer, {\n    [todoListId1]: [\n      {\n        id: v1(),\n        title: 'Meat',\n        status: TaskStatuses.Completed,\n        todoListId: todoListId1,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n      {\n        id: v1(),\n        title: 'Fish',\n        status: TaskStatuses.Completed,\n        todoListId: todoListId1,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n      {\n        id: v1(),\n        title: 'Beer',\n        status: TaskStatuses.New,\n        todoListId: todoListId1,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n    ],\n    [todoListId2]: [\n      {\n        id: v1(),\n        title: 'Meat',\n        status: TaskStatuses.Completed,\n        todoListId: todoListId2,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n      {\n        id: v1(),\n        title: 'Meat',\n        status: TaskStatuses.Completed,\n        todoListId: todoListId2,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n      {\n        id: v1(),\n        title: 'Beer',\n        status: TaskStatuses.New,\n        todoListId: todoListId2,\n        description: '',\n        order: 0,\n        priority: TaskPriorities.Low,\n        addedDate: '',\n        deadline: '',\n        startDate: '',\n        entityStatus: 'idle',\n      },\n    ],\n  });\n  const removeTodoList = (todoListId: string) => {\n    // удаление TodoList\n    const action = removeTodolistAC(todoListId);\n    dispatchToTodoListsReducer(action);\n    dispatchToTasksReducer(action);\n  };\n\n  const removeTasks = (todoListId: string, taskId: string) => {\n    // Удаление таски\n    const action = removeTasksAC(todoListId, taskId);\n    dispatchToTasksReducer(action);\n  };\n\n  const addTask = (todoListId: string, title: string) => {\n    // Добавление таски\n    const action = addTasksAC(todoListId, {\n      id: '1',\n      title: title,\n      status: TaskStatuses.Completed,\n      todoListId: todoListId,\n      description: '',\n      order: 0,\n      priority: TaskPriorities.Low,\n      addedDate: '',\n      deadline: '',\n      startDate: '',\n    });\n    dispatchToTasksReducer(action);\n  };\n  // Изменение значения title task за счёт превращения span в input\n  const changeTaskTitle = (todoListId: string, taskId: string, title: string) => {\n    const action = updateTaskAC(todoListId, taskId, { title });\n    dispatchToTasksReducer(action);\n  };\n  // Изменение чекеда\n  const changeChecked = (todoListId: string, taskId: string, status: TaskStatuses) => {\n    const action = updateTaskAC(todoListId, taskId, { status });\n    dispatchToTasksReducer(action);\n  };\n\n  const changeFilter = (todoListId: string, filter: FilterType) => {\n    // Изменение значения фильтра в todoLists\n    const action = changeTodolistFilterAC(todoListId, filter);\n    dispatchToTodoListsReducer(action);\n  };\n  //Функция изменения title todoList за счёт превращения span в input\n  const changeTitleTodoList = (todoListId: string, title: string) => {\n    const action = changeTodolistTitleAC(todoListId, title);\n    dispatchToTodoListsReducer(action);\n  };\n\n  // Создание нового тодолиста\n  const addTodoList = (title: string) => {\n    const action = addTodolistAC({ id: 'todoListId3', title: title, addedDate: '', order: 0 });\n    dispatchToTodoListsReducer(action);\n    dispatchToTasksReducer(action);\n  };\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton size=\"large\" edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            News\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Container fixed>\n        <Grid container style={{ padding: '10px' }}>\n          <AddItemForms callBack={(title) => addTodoList(title)} />\n        </Grid>\n        <Grid container spacing={3}>\n          {todoLists.map((td) => {\n            // Отрисовка компонент todoLists по map\n            let changeTasks = tasks[td.id]; // Фильтрация по новому значению фильтра\n            if (td.filter === 'completed') {\n              changeTasks = tasks[td.id].filter((t) => t.status === TaskStatuses.Completed);\n            }\n            if (td.filter === 'active') {\n              changeTasks = tasks[td.id].filter((t) => t.status === TaskStatuses.New);\n            }\n            return (\n              <Grid item>\n                <Paper style={{ padding: '10px' }}>\n                  <TodoList\n                    todoList={td}\n                    key={td.id}\n                    tasks={changeTasks}\n                    removeTasks={removeTasks}\n                    changeFilter={changeFilter}\n                    addTask={addTask}\n                    changeChecked={changeChecked}\n                    removeTodoList={removeTodoList}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTitleTodoList={changeTitleTodoList}\n                  />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default AppWithReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport AppWithReducers from './trash/AppWithReducers';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst AppWithReducerImport = AppWithReducers;\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    ,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}